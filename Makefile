# This Makefile implements common tasks needed by developers
# A list of implemented rules can be obtained by the command "make help"

.DEFAULT_GOAL=build
.PHONY .SILENT : help
help :
	echo
	echo "    Implemented targets:"
	echo
	echo "    build        build pypmc for python2 and python3"
	echo "    buildX       build pypmc for pythonX only where X is one of {2,3}"
	echo "    build-sdist  build pypmc from the dist directory (python 2 and 3)"
	echo "    build-sdistX build pypmc from the dist directory (pythonX, X in {2,3})"
	echo "    check        use nosetests to test pypmc with python 2.7 and 3"
	echo "    checkX       use nosetests to test pypmc with python 2.7 or 3,"
	echo "                 where X is one of {2,3}"
	echo "    check-fast   use nosetests to run only quick tests of pypmc"
	echo "                 using nosetests-2.7 and nosetests3"
	echo "    check-sdist  use nosetests-2.7 and nosetests3 to test the distribution"
	echo "                 generated by 'make sdist'"
	echo "    check-sdistX use nosetests-2.7 or nosetests3 to test the distribution"
	echo "                 generated by 'make sdist', where X is one of {2,3}"
	echo "    clean        delete compiled and temporary files"
	echo "    coverage     produce and show a code coverage report"
	echo "                 Note: Cython modules cannot be analyzed"
	echo "    distcheck    runs 'check', check-sdist', 'run-examples' and"
	echo "                 opens a browser with the built documentation"
	echo "    doc          build the html documentation using sphinx"
	echo "    doc-pdf      build the pdf documentation using sphinx"
	echo "    help         show this message"
	echo "    run-examples run all examples using python 2 and 3"
	echo "    sdist        make a source distribution"
	echo "    show-todos   show todo marks in the source code"
	echo

.PHONY : clean
clean:
	#remove build doc
	rm -rf ./doc/_build

	#remove .pyc files created by python 2.7
	rm -f ./*.pyc
	find -P . -name '*.pyc' -delete

	#remove .pyc files crated by python 3
	rm -rf ./__pycache__
	find -P . -name __pycache__ -delete

	#remove build folder in root directory
	rm -rf ./build

	#remove cythonized C source and object files
	find -P . -name '*.c' -delete

	#remove variational binaries only if command line argument specified
	find -P . -name '*.so' -delete

	#remove backup files
	find -P . -name '*~' -delete

	#remove files created by coverage
	rm -f .coverage
	rm -rf coverage

	# remove egg info
	rm -rf pypmc.egg-info

	# remove downloaded seutptools
	rm -f setuptools-3.3.zip

	# remove dist/
	rm -rf dist

.PHONY : build
build : build2

.PHONY : build2
build2 :
	python2 setup.py build_ext --inplace

.PHONY :
check : check2

.PHONY : check2
check2 : build2
	@ # run tests
	nosetests-2.7 --processes=-1 --process-timeout=60

	# run tests in parallel
	mpirun -n 2 nosetests-2.7

.PHONY : check-fast
check-fast : build
	nosetests-2.7 -a '!slow' --processes=-1 --process-timeout=60
	nosetests3    -a '!slow' --processes=-1 --process-timeout=60

.PHONY : .build-system-default
.build-system-default :
	python setup.py build_ext --inplace

.PHONY : doc
doc : .build-system-default
	cd doc && make html

.PHONY : doc-pdf
doc-pdf : .build-system-default
	cd doc; make latexpdf

.PHONY : run-examples
run-examples : build
	cd examples ; \
	for file in $$(ls) ; do \
	    echo running $${file} with python2 && \
	    python2 $${file} && \
	    echo running $${file} with python3 && \
	    python3 $${file} && \
	    \
	    # execute with mpirun if mpi4py appears in the file \
	    if grep -Fq 'mpi4py' $${file} ; then \
		echo "$${file}" is mpi parallelized && \
		echo running $${file} in parallel with python2 && \
		mpirun -n 2 python2 $${file} && \
		echo running $${file} in parallel with python3 && \
		mpirun -n 2 python3 $${file} ; \
	    fi \
	; \
	done

.PHONY : sdist
sdist :
	python setup.py sdist

.PHONY : build-sdist
build-sdist : build-sdist2 build-sdist3

./dist/pypmc*/NUL : sdist
	cd dist && tar xaf *.tar.gz && cd *

.PHONY : build-sdist2
build-sdist2 : ./dist/pypmc*/NUL
	cd dist/pypmc* && python2 setup.py build

.PHONY : build-sdist3
build-sdist3 : ./dist/pypmc*/NUL
	cd dist/pypmc* && python3 setup.py build

.PHONY : check-sdist
check-sdist : check-sdist2 check-sdist3

.PHONY : check-sdist2
check-sdist2 : build-sdist2
	cd dist/*/build/lib*2.7 && \
	nosetests-2.7 --processes=-1 --process-timeout=60 && \
	mpirun -n 2 nosetests-2.7

.PHONY : check-sdist3
check-sdist3 : build-sdist3
	cd dist/*/build/lib*3.* && \
	nosetests3 --processes=-1 --process-timeout=60 && \
	mpirun -n 2 nosetests3

.PHONY : distcheck
distcheck : check check-sdist doc
	@ # execute "run-examples" after all other recipes makes are done
	make run-examples
	xdg-open link_to_documentation

.PHONY : show-todos
grep_cmd = ack-grep -i --no-html --no-cc [^"au""sphinx.ext."]todo
show-todos :
	@ # suppress errors here
	@ # note that no todo found is considered as error
	$(grep_cmd) doc ; \
	$(grep_cmd) pypmc ; \
	$(grep_cmd) examples ; echo \

.PHONY : coverage
coverage : .build-system-default
	rm -rf coverage
	nosetests --with-coverage --cover-package=nifty --cover-html --cover-html-dir=coverage
	xdg-open coverage/index.html
